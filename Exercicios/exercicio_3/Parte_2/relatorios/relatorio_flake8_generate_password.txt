Relatório Flake8 - Atividade 2 (mini-python)
projeto: Generate Password.

Arquivo: generate_password.py
--------------------------------
5:1: E302 expected 2 blank lines, found 1
10:1: E302 expected 2 blank lines, found 1
13:80: E501 line too long (94 > 79 characters)
18:1: W293 blank line contains whitespace
19:5: E303 too many blank lines (2)
22:1: E305 expected 2 blank lines after class or function definition, found 1

Arquivo: test_hashing_password.py
---------------------------------
1:1: F401 'pytest' imported but unused
4:1: E302 expected 2 blank lines, found 1
5:80: E501 line too long (113 > 79 characters)
7:1: E302 expected 2 blank lines, found 1
10:1: E302 expected 2 blank lines, found 1
11:80: E501 line too long (177 > 79 characters)


Vunerabilidades:

E302: Esperado 2 linhas em branco, encontrado 1
E501: Linha muito longa
W293: Linha em branco contém espaço em branco
E303: Muitas linhas em branco
E305: Esperado 2 linhas em branco após definição de classe ou função, encontrado 1
F401: 'pytest' importado mas não usado


Vulnerabilidade mais comum: E302 (expected 2 blank lines, found 1)


sugestoes:


import argparse
import hashlib


def hash_password(password, hashtype='sha256'):
    """Hash a password using the specified hash type."""
    m = getattr(hashlib, hashtype)()
    m.update(password.encode())
    return m.hexdigest()


def main():
    parser = argparse.ArgumentParser(description='Hashing given password')
    parser.add_argument('password', help='Input password you want to hash')
    parser.add_argument('-t', '--type', default='sha256', choices=['sha256', 'sha512', 'md5'],
                        help='Type of hash to use (default: sha256)')
    args = parser.parse_args()

    hashed_password = hash_password(args.password, args.type)

    print(f"< hash-type : {args.type} >")
    print(hashed_password)


if __name__ == "__main__":
    main()



